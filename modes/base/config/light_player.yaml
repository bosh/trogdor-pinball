#config_version=6

event_player:
  mode_base_started:
    - start_dome_ring_spin_red
    - start_star_ring_spin_blue
  s_start_active:
    - stop_dome_ring_spin_red
    - stop_star_ring_spin_blue
  s_start_inactive:
    - start_dome_ring_spin_red
    - start_star_ring_spin_blue

show_player:
  ts_start_button_active:
    light_ring_flash:
      key: dome_ring_a_menu_flash_x3
      action: play
      speed: 2
      loops: 2
      show_tokens:
        lights: lights_dome_ring_a
        color: orange

  stop_dome_ring_spin_red:
    dome_ring_red_spin:
      action: stop

  start_dome_ring_spin_red:
    tokenized_ring_spin:
      action: play
      key: dome_ring_red_spin
      show_tokens:
        # Asc order should spin CCW
        l1: l_dome_ring_a_1
        l2: l_dome_ring_a_2
        l3: l_dome_ring_a_3
        l4: l_dome_ring_a_4
        l5: l_dome_ring_a_5
        l6: l_dome_ring_a_6
        l7: l_dome_ring_a_7
        l8: l_dome_ring_a_8
        level1: 0a0000
        level2: 1a0000
        level3: 220000
        level4: 441000
        level5: 662a10
        level6: 883333
        level7: "000000"
        level8: "000000"

  stop_star_ring_spin_blue:
    star_ring_blue_spin:
      action: stop

  start_star_ring_spin_blue:
    tokenized_ring_spin:
      action: play
      key: star_ring_blue_spin
      show_tokens:
        # Reverse order should spin CW
        l1: l_star_ring_a_8
        l2: l_star_ring_a_7
        l3: l_star_ring_a_6
        l4: l_star_ring_a_5
        l5: l_star_ring_a_4
        l6: l_star_ring_a_3
        l7: l_star_ring_a_2
        l8: l_star_ring_a_1
        level1: 00000a
        level2: 00001a
        level3: "000022"
        level4: 100044
        level5: 2a1066
        level6: 333388
        level7: "000000"
        level8: "000000"

light_player:
  "{current_player.ball == 1}":
    vlight_ball_1: "ff00ff"
  "{current_player.ball == 2}":
    vlight_ball_2: "ff00ff"
  "{current_player.ball == 3}":
    vlight_ball_2: "ff00ff"


  # High voltage status warn LED
  "{device.switches.s_high_voltage_status.state == 0}":
    l_pf_1: eee000
  "{device.switches.s_high_voltage_status.state == 1}":
    l_pf_1: ff0000


  #Minicab left status LED tracking button and EOS
  "{device.switches.s_left_flipper.state == 0 and device.switches.s_left_flipper_eos.state == 0}":
    l_mini_cab_left: off
  "{device.switches.s_left_flipper.state == 1 and device.switches.s_left_flipper_eos.state == 0}":
    l_mini_cab_left: "000099"
  "{device.switches.s_left_flipper.state == 0 and device.switches.s_left_flipper_eos.state == 1}":
    l_mini_cab_left: 990000
  "{device.switches.s_left_flipper.state == 1 and device.switches.s_left_flipper_eos.state == 1}":
    l_mini_cab_left: cc00cc

  #Minicab right status LED tracking button and EOS
  "{device.switches.s_right_flipper.state == 0 and device.switches.s_right_flipper_eos.state == 0}":
    l_mini_cab_right: off
  "{device.switches.s_right_flipper.state == 1 and device.switches.s_right_flipper_eos.state == 0}":
    l_mini_cab_right: "000099"
  "{device.switches.s_right_flipper.state == 0 and device.switches.s_right_flipper_eos.state == 1}":
    l_mini_cab_right: 990000
  "{device.switches.s_right_flipper.state == 1 and device.switches.s_right_flipper_eos.state == 1}":
    l_mini_cab_right: cc00cc

  #Minicab trough status LED tracking plunger switch and mini flip button
  "{device.switches.s_plunger.state == 0 and device.switches.s_mini_flipper.state == 0}":
    l_mini_cab_mini: off
  "{device.switches.s_plunger.state == 1 and device.switches.s_mini_flipper.state == 0}":
    l_mini_cab_mini: "009900"
  "{device.switches.s_plunger.state == 0 and device.switches.s_mini_flipper.state == 1}":
    l_mini_cab_mini: 990000
  "{device.switches.s_plunger.state == 1 and device.switches.s_mini_flipper.state == 1}":
    l_mini_cab_mini: cccc00


  # Trough status GI light
  "{device.switches.s_trough_ball_jam.state == 1}":
    l_pf_2: cc3333
  "{device.switches.s_trough_ball_jam.state == 0 and device.switches.s_trough_ball_1.state + device.switches.s_trough_ball_2.state + device.switches.s_trough_ball_3.state + device.switches.s_trough_ball_4.state + device.switches.s_trough_ball_5.state == 0}":
    l_pf_2: ff0000 #Empty is red
  "{device.switches.s_trough_ball_jam.state == 0 and device.switches.s_trough_ball_1.state + device.switches.s_trough_ball_2.state + device.switches.s_trough_ball_3.state + device.switches.s_trough_ball_4.state + device.switches.s_trough_ball_5.state == 1}":
    l_pf_2: 994400
  "{device.switches.s_trough_ball_jam.state == 0 and device.switches.s_trough_ball_1.state + device.switches.s_trough_ball_2.state + device.switches.s_trough_ball_3.state + device.switches.s_trough_ball_4.state + device.switches.s_trough_ball_5.state == 2}":
    l_pf_2: 557700
  "{device.switches.s_trough_ball_jam.state == 0 and device.switches.s_trough_ball_1.state + device.switches.s_trough_ball_2.state + device.switches.s_trough_ball_3.state + device.switches.s_trough_ball_4.state + device.switches.s_trough_ball_5.state == 3}":
    l_pf_2: 33aa00
  "{device.switches.s_trough_ball_jam.state == 0 and device.switches.s_trough_ball_1.state + device.switches.s_trough_ball_2.state + device.switches.s_trough_ball_3.state + device.switches.s_trough_ball_4.state + device.switches.s_trough_ball_5.state > 3}":
    l_pf_2: 0066ff #intended for 3 balls, so 4+ is unexpected blue state

  # Playfield Multiplier
  "{current_player.playfield_multiplier == 2}":
    l_pf_x2: ff0000
  "{current_player.playfield_multiplier != 2}":
    l_pf_x2: off
  "{current_player.playfield_multiplier == 3}":
    l_pf_x3: ff0000
  "{current_player.playfield_multiplier != 3}":
    l_pf_x3: off
  "{current_player.playfield_multiplier == 4}":
    l_pf_x4: ff0000
  "{current_player.playfield_multiplier != 4}":
    l_pf_x4: off
  "{current_player.playfield_multiplier == 5}":
    l_pf_x5: ff0000
  "{current_player.playfield_multiplier != 5}":
    l_pf_x5: off
